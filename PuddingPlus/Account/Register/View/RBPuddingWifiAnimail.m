//
// RBPuddingWifiAnimail.m
// Generated by Core Animator version 1.3.1 on 16/9/10.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

#import "RBPuddingWifiAnimail.h"
#import "UIImage+TintColor.h"


@interface RBPuddingWifiAnimail (){
    NSTimer * timer;
}
@property (strong, nonatomic) NSMapTable *completionBlocksByAnimation;
@end

@implementation RBPuddingWifiAnimail

#pragma mark - Life Cycle

- (instancetype)init
{
	return [self initWithFrame:CGRectMake(0,SX(100),SX(375),SX(375))];
}

- (instancetype)initWithFrame:(CGRect)frame
{
	self = [super initWithFrame:frame];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

- (instancetype)initWithCoder:(NSCoder *)coder
{
	self = [super initWithCoder:coder];
	if (self)
	{
		[self setupHierarchy];
	}
	return self;
}

#pragma mark - Scaling

- (void)layoutSubviews
{
	[super layoutSubviews];

	UIView *scalingView = self.viewsByName[@"__scaling__"];
	float xScale = self.bounds.size.width / scalingView.bounds.size.width;
	float yScale = self.bounds.size.height / scalingView.bounds.size.height;
	switch (self.contentMode) {
		case UIViewContentModeScaleToFill:
			break;
		case UIViewContentModeScaleAspectFill:
		{
			float scale = MAX(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
		default:
		{
			float scale = MIN(xScale, yScale);
			xScale = scale;
			yScale = scale;
			break;
		}
	}
	scalingView.transform = CGAffineTransformMakeScale(xScale, yScale);
	scalingView.center = CGPointMake(CGRectGetMidX(self.bounds), CGRectGetMidY(self.bounds));
}

#pragma mark - Setup

- (void)setupHierarchy
{
    [self addNotification];
	self.completionBlocksByAnimation = [NSMapTable mapTableWithKeyOptions:NSPointerFunctionsOpaqueMemory valueOptions:NSPointerFunctionsStrongMemory];
	NSMutableDictionary *viewsByName = [NSMutableDictionary dictionary];

	UIView *__scaling__ = [UIView new];
    __scaling__.bounds = CGRectMake(0, 0, SX(375), SX(375));
	__scaling__.layer.masksToBounds = YES;
	[self addSubview:__scaling__];
	viewsByName[@"__scaling__"] = __scaling__;

	UIView *onpudding = [UIView new];
	onpudding.bounds = CGRectMake(0, 0, SX(484.5), SX(369.7));
	onpudding.layer.position = CGPointMake(SX(242.273), SX(184.851));
	[__scaling__ addSubview:onpudding];
	viewsByName[@"onpudding"] = onpudding;

	UIImageView *backgroundDesk = [UIImageView new];
	backgroundDesk.bounds = CGRectMake(0, 0, SX(375.0), SX(136.0));
	UIImage *imgBackgroundDesk = [UIImage imageNamed:@"background_desk"];
	if ( imgBackgroundDesk == nil ) { NSLog(@"** Warning: Could not create image from 'background_desk.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	backgroundDesk.image = imgBackgroundDesk;
	backgroundDesk.contentMode = UIViewContentModeScaleAspectFill;
	backgroundDesk.layer.position = CGPointMake(SX(187.500), SX(203.086));
	[onpudding addSubview:backgroundDesk];
	viewsByName[@"background_desk"] = backgroundDesk;

	UIImageView *puddingSback = [UIImageView new];
	puddingSback.bounds = CGRectMake(0, 0, SX(117.0), SX(121.0));
	UIImage *imgPuddingSback = [UIImage imageNamed:@"pudding'sback"];
	if ( imgPuddingSback == nil ) { NSLog(@"** Warning: Could not create image from 'pudding'sback.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	puddingSback.image = imgPuddingSback;
	puddingSback.contentMode = UIViewContentModeScaleAspectFill;
	puddingSback.layer.position = CGPointMake(SX(187.500), SX(183.500));
	[onpudding addSubview:puddingSback];
	viewsByName[@"pudding'sback"] = puddingSback;

	UIImageView *chargingPlug2 = [UIImageView new];
	chargingPlug2.bounds = CGRectMake(0, 0, SX(18.0), SX(42.0));
	UIImage *imgChargingPlug = [UIImage imageNamed:@"charging plug.png"];
	if ( imgChargingPlug == nil ) { NSLog(@"** Warning: Could not create image from 'charging plug.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	chargingPlug2.image = imgChargingPlug;
	chargingPlug2.contentMode = UIViewContentModeScaleAspectFill;
	chargingPlug2.layer.position = CGPointMake(SX(141.688), SX(300.928));
	chargingPlug2.alpha = 0.00;
	[onpudding addSubview:chargingPlug2];
	viewsByName[@"charging plug 2"] = chargingPlug2;

	UIImageView *magnifier = [UIImageView new];
	magnifier.bounds = CGRectMake(0, 0, SX(58.0), SX(56.0));
	UIImage *imgMagnifier = [UIImage imageNamed:@"magnifier.png"];
	if ( imgMagnifier == nil ) { NSLog(@"** Warning: Could not create image from 'magnifier.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	magnifier.image = imgMagnifier;
	magnifier.contentMode = UIViewContentModeScaleAspectFill;
	magnifier.layer.position = CGPointMake(SX(208.740), SX(231.465));
	magnifier.alpha = 0.00;
	[onpudding addSubview:magnifier];
	viewsByName[@"magnifier"] = magnifier;

	UIImageView *powerSGesture = [UIImageView new];
	powerSGesture.bounds = CGRectMake(0, 0, SX(71.0), SX(94.0));
	UIImage *imgPowerSGesture = [UIImage imageNamed:@"power's_gesture.png"];
	if ( imgPowerSGesture == nil ) { NSLog(@"** Warning: Could not create image from 'power's_gesture.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	powerSGesture.image = imgPowerSGesture;
	powerSGesture.contentMode = UIViewContentModeScaleAspectFill;
//	powerSGesture.layer.position = CGPointMake(SX(346.436), SX(322.701));
    powerSGesture.layer.position = CGPointMake(SX(346.436), SX(292.701));
	powerSGesture.alpha = 0.00;
	[onpudding addSubview:powerSGesture];
	viewsByName[@"power's_gesture"] = powerSGesture;

	UIImageView *puddingSSleepPaste = [UIImageView new];
	puddingSSleepPaste.bounds = CGRectMake(0, 0, SX(117.0), SX(121.0));
	UIImage *imgPuddingSSleepPaste = [UIImage imageNamed:@"pudding‘s_sleep paste.png"];
	if ( imgPuddingSSleepPaste == nil ) { NSLog(@"** Warning: Could not create image from 'pudding‘s_sleep paste.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	puddingSSleepPaste.image = imgPuddingSSleepPaste;
	puddingSSleepPaste.contentMode = UIViewContentModeScaleAspectFill;
	puddingSSleepPaste.layer.position = CGPointMake(SX(187.500), SX(183.500));
	puddingSSleepPaste.alpha = 0.00;
	[onpudding addSubview:puddingSSleepPaste];
	viewsByName[@"pudding‘s_sleep paste"] = puddingSSleepPaste;

	UIImageView *takeAwayGesture = [UIImageView new];
	takeAwayGesture.bounds = CGRectMake(0, 0, SX(69.0), SX(77.0));
	UIImage *imgTakeAwayGesture = [UIImage imageNamed:@"take_away_gesture.png"];
	if ( imgTakeAwayGesture == nil ) { NSLog(@"** Warning: Could not create image from 'take_away_gesture.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	takeAwayGesture.image = imgTakeAwayGesture;
	takeAwayGesture.contentMode = UIViewContentModeScaleAspectFill;
	takeAwayGesture.layer.position = CGPointMake(SX(302.609), SX(271.652));
	takeAwayGesture.alpha = 0.00;
	[onpudding addSubview:takeAwayGesture];
	viewsByName[@"take_away_gesture"] = takeAwayGesture;

	UIImageView *sleepPaste = [UIImageView new];
	sleepPaste.bounds = CGRectMake(0, 0, SX(69.0), SX(40.0));
	UIImage *imgSleepPaste = [UIImage imageNamed:@"sleep paste.png"];
	if ( imgSleepPaste == nil ) { NSLog(@"** Warning: Could not create image from 'sleep paste.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	sleepPaste.image = imgSleepPaste;
	sleepPaste.contentMode = UIViewContentModeScaleAspectFill;
	sleepPaste.layer.position = CGPointMake(SX(293.717), SX(232.828));
	sleepPaste.alpha = 0.00;
	[onpudding addSubview:sleepPaste];
	viewsByName[@"sleep paste"] = sleepPaste;

	UIImageView *puddingEmpty = [UIImageView new];
	puddingEmpty.bounds = CGRectMake(0, 0, SX(117.0), SX(121.0));
	UIImage *imgPuddingEmpty = [UIImage imageNamed:@"pudding_empty.png"];
	if ( imgPuddingEmpty == nil ) { NSLog(@"** Warning: Could not create image from 'pudding_empty.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	puddingEmpty.image = imgPuddingEmpty;
	puddingEmpty.contentMode = UIViewContentModeScaleAspectFill;
	puddingEmpty.layer.position = CGPointMake(SX(187.500), SX(183.500));
	puddingEmpty.alpha = 0.00;
	[onpudding addSubview:puddingEmpty];
	viewsByName[@"pudding_empty"] = puddingEmpty;

	UIImageView *phoneSgesture = [UIImageView new];
	phoneSgesture.bounds = CGRectMake(0, 0, SX(179.0), SX(155.0));
	UIImage *imgPhoneSgesture = [UIImage imageNamed:@"phone'sgesture.png"];
	if ( imgPhoneSgesture == nil ) { NSLog(@"** Warning: Could not create image from 'phone'sgesture.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	phoneSgesture.image = imgPhoneSgesture;
	phoneSgesture.contentMode = UIViewContentModeScaleAspectFill;
	phoneSgesture.layer.position = CGPointMake(SX(384.132), SX(85.031));
	phoneSgesture.alpha = 0.00;
	[onpudding addSubview:phoneSgesture];
	viewsByName[@"phone'sgesture"] = phoneSgesture;

	UIImageView *removalOfStickersSleep = [UIImageView new];
	removalOfStickersSleep.bounds = CGRectMake(0, 0, SX(120.0), SX(84.0));
	UIImage *imgRemovalOfStickersSleep = [UIImage imageNamed:@"removal of stickers Sleep.png"];
	if ( imgRemovalOfStickersSleep == nil ) { NSLog(@"** Warning: Could not create image from 'removal of stickers Sleep.png'. Please make sure that it is added to the project directly (not in a folder reference)."); }
	removalOfStickersSleep.image = imgRemovalOfStickersSleep;
	removalOfStickersSleep.contentMode = UIViewContentModeScaleAspectFill;
	removalOfStickersSleep.layer.position = CGPointMake(SX(212.346), SX(182.174));
	removalOfStickersSleep.alpha = 0.00;
	[onpudding addSubview:removalOfStickersSleep];
	viewsByName[@"removal of stickers Sleep"] = removalOfStickersSleep;

    
    UIImageView *nowifiimageView = [UIImageView new];
    nowifiimageView.bounds = CGRectMake(0, 0, SX(117.0), SX(121.0));
    nowifiimageView.contentMode = UIViewContentModeScaleAspectFill;
    nowifiimageView.layer.position = puddingSback.center;
    nowifiimageView.alpha = 0.00;
    [onpudding addSubview:nowifiimageView];
    viewsByName[@"wifi_lamparray"] = nowifiimageView;
    
    
    
    
    UIImageView *sendLoading = [UIImageView new];
    sendLoading.bounds = CGRectMake(0, 0, SX(254), SX(39));

    NSMutableArray * imageArray = [NSMutableArray new];
    for(int i = 1 ; i < 25 ;i++){
        UIImage * image = [UIImage imageNamed:[NSString stringWithFormat:@"sounds_%02d",i]];
        if(image == nil){
            NSLog(@"** Warning: Could not create image wifi_lamparray_0%d",i);
            continue;
        }
        [imageArray addObject:image];
    }
    sendLoading.animationImages = imageArray;
    sendLoading.animationDuration = imageArray.count * 0.05;
    sendLoading.animationRepeatCount = (NSInteger)INTMAX_MAX;
    sendLoading.contentMode = UIViewContentModeScaleAspectFill;
    sendLoading.layer.position = puddingSback.center;
    sendLoading.alpha = 0.00;
    [onpudding addSubview:sendLoading];
    viewsByName[@"sendLoading"] = sendLoading;
    
	self.viewsByName = viewsByName;
}

#pragma mark - onpudding

- (void)cancleAnimail{
    [timer invalidate];
    timer = nil;
    [self removeAllAnimations];
    [self addWifiAnimail];
}

- (void)addWifiAnimail{
    [self.viewsByName[@"sleep paste"] setAlpha:1];

    UIImageView * imageView = self.viewsByName[@"wifi_lamparray"];
    if([imageView isKindOfClass:[UIImageView class]]){
        NSMutableArray * imageArray = [NSMutableArray new];
        for(int i = 1 ; i < 4 ;i++){
            UIImage * image = [UIImage imageNamed:[NSString stringWithFormat:@"wifi_lamparray_0%d",i]];
            if(image == nil){
                NSLog(@"** Warning: Could not create image wifi_lamparray_0%d",i);
                continue;
            }
            [imageArray addObject:image];
        }
        imageView.animationImages = imageArray;
        imageView.animationDuration = imageArray.count * 0.3;
        imageView.animationRepeatCount = (NSInteger)INTMAX_MAX;

        imageView.alpha = 1;
        [imageView startAnimating];
        [self.viewsByName[@"pudding'sback"] setAlpha:0];
        [self.viewsByName[@"pudding_empty"] setAlpha:1];
    }

}

- (void)changeHandleLocation{
  dispatch_async(dispatch_get_main_queue(), ^{
      
      [self.viewsByName[@"sleep paste"] setAlpha:1];
      
      UIView *viewToAnimate = self.viewsByName[@"phone'sgesture"];
      viewToAnimate.alpha = 1 ;
      viewToAnimate.layer.opacity = 1;
      viewToAnimate.layer.position = CGPointMake(SX(384.132 ) - SX(99), SX(85.031 + 31));
  });
}

- (void)addStartWifiAnimail{
    [self.viewsByName[@"sleep paste"] setAlpha:1];
    
    UIImageView * imageView = self.viewsByName[@"wifi_lamparray"];
    if([imageView isKindOfClass:[UIImageView class]]){
        NSMutableArray * imageArray = [NSMutableArray new];
        for(int i = 0 ; i < 2 ;i++){
            UIImage * image;
            if(i == 0){
               image = [UIImage imageNamed:@"wifi_lamparray_03"];
            }else{
                image = [UIImage createImageWithColor:[UIColor clearColor]];
            }
            if(image == nil){
                NSLog(@"** Warning: Could not create image wifi_lamparray_0%d",i);
                continue;
            }
            [imageArray addObject:image];
        }
        imageView.animationImages = imageArray;
        imageView.animationDuration = imageArray.count * 0.6;
        imageView.animationRepeatCount = (NSInteger)INTMAX_MAX;
        
        imageView.alpha = 1;
        [imageView startAnimating];
        [self.viewsByName[@"pudding'sback"] setAlpha:0];
        [self.viewsByName[@"pudding_empty"] setAlpha:1];
    }

}

- (void)setUpAnimail{
    UIImageView * imageView = self.viewsByName[@"wifi_lamparray"];
    [imageView startAnimating];
}

- (void)addSettingAnimail{
    

    [self.viewsByName[@"sleep paste"] setAlpha:1];
    UIImageView * imageView = self.viewsByName[@"wifi_lamparray"];
    if([imageView isKindOfClass:[UIImageView class]]){
        NSMutableArray * imageArray = [NSMutableArray new];
        for(int i = 1 ; i < 7 ;i++){
            UIImage * image = [UIImage imageNamed:[NSString stringWithFormat:@"sendingsound_0%d",i]];
            if(image == nil){
                NSLog(@"** Warning: Could not create image wifi_lamparray_0%d",i);
                continue;
            }
            [imageArray addObject:image];
        }
        imageView.animationImages = imageArray;
        imageView.animationDuration = imageArray.count * 0.3;
        imageView.animationRepeatCount = (NSInteger)INTMAX_MAX;
       

        imageView.alpha = 1;
        [imageView startAnimating];
        [self.viewsByName[@"pudding'sback"] setAlpha:0];
        [self.viewsByName[@"pudding_empty"] setAlpha:1];
    }
    
}

- (void)showSendAnimails:(BOOL)flag{
    UIImageView *viewToAnimate = self.viewsByName[@"sendLoading"];
    if([viewToAnimate isKindOfClass:[UIImageView class]]){
        if(flag){
            viewToAnimate.alpha = 1.f;
            [viewToAnimate startAnimating];

        }else{
            [viewToAnimate stopAnimating];
        }
    }
    @weakify(self);
    [UIView animateWithDuration:.2 animations:^{
        @strongify(self);
        UIView *viewToAnimatea = self.viewsByName[@"phone'sgesture"];
        viewToAnimatea.alpha = flag ?.4 :1 ;
        viewToAnimate.alpha = flag ? 1:0;

    }];
}

- (void)addOnpuddingAnimation
{
	[self addOnpuddingAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:NULL];
}

- (void)addOnpuddingAnimationWithCompletion:(void (^)(BOOL finished))completionBlock
{
	[self addOnpuddingAnimationWithBeginTime:0 andFillMode:kCAFillModeBoth andRemoveOnCompletion:NO completion:completionBlock];
}

- (void)addOnpuddingAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion
{
	[self addOnpuddingAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:NULL];
}

- (void)addOnpuddingAnimationAndRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
	[self addOnpuddingAnimationWithBeginTime:0 andFillMode:removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth andRemoveOnCompletion:removedOnCompletion completion:completionBlock];
}


- (void)addOnpuddingMoveAnimation:(void (^)(BOOL finished))completionBlock
{

    
    CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
    CAMediaTimingFunction *easeInTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
    CAMediaTimingFunction *easeOutTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];
    
    if (completionBlock)
    {
        CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
        representativeAnimation.duration = 1.8;
        representativeAnimation.delegate = self;
        [self.layer addAnimation:representativeAnimation forKey:@"Movegrsture"];
        [self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"Movegrsture"]];
    }
    
    CAKeyframeAnimation *phoneSgestureOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    phoneSgestureOpacityAnimation.duration = 1.8;
    phoneSgestureOpacityAnimation.values = @[@(0.000), @(1.000), @(1.000)];
    phoneSgestureOpacityAnimation.keyTimes = @[@(0.000), @(0.222), @(1.000)];
    phoneSgestureOpacityAnimation.timingFunctions = @[linearTiming, linearTiming];
    phoneSgestureOpacityAnimation.beginTime = 0;
    phoneSgestureOpacityAnimation.fillMode = kCAFillModeBoth;
    phoneSgestureOpacityAnimation.removedOnCompletion = NO;
    [[self.viewsByName[@"phone'sgesture"] layer] addAnimation:phoneSgestureOpacityAnimation forKey:@"movegrsture_Opacity"];
    
    CAKeyframeAnimation *phoneSgestureTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
    phoneSgestureTranslationXAnimation.duration = 1.8;
    phoneSgestureTranslationXAnimation.values = @[@(0.000), @(0.000), @(SX(-99.000))];
    phoneSgestureTranslationXAnimation.keyTimes = @[@(0.000), @(0.222), @(1.000)];
    phoneSgestureTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming];
    phoneSgestureTranslationXAnimation.beginTime = 0;
    phoneSgestureTranslationXAnimation.fillMode = kCAFillModeBoth;
    phoneSgestureTranslationXAnimation.removedOnCompletion = NO;
    [[self.viewsByName[@"phone'sgesture"] layer] addAnimation:phoneSgestureTranslationXAnimation forKey:@"movegrsture_TranslationX"];
    
    CAKeyframeAnimation *phoneSgestureTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
    phoneSgestureTranslationYAnimation.duration = 1.8;
    phoneSgestureTranslationYAnimation.values = @[@(0.000), @(0.000), @(SX(-3.805)), @(SX(31.000))];
    phoneSgestureTranslationYAnimation.keyTimes = @[@(0.000), @(0.222), @(0.556), @(1.000)];
    phoneSgestureTranslationYAnimation.timingFunctions = @[linearTiming, easeOutTiming, easeInTiming];
    phoneSgestureTranslationYAnimation.beginTime = 0;
    phoneSgestureTranslationYAnimation.fillMode = kCAFillModeBoth;
    phoneSgestureTranslationYAnimation.removedOnCompletion = NO;
    [[self.viewsByName[@"phone'sgesture"] layer] addAnimation:phoneSgestureTranslationYAnimation forKey:@"movegrsture_TranslationY"];
}



- (void)addOnpuddingAnimationWithBeginTime:(CFTimeInterval)beginTime andFillMode:(NSString *)fillMode andRemoveOnCompletion:(BOOL)removedOnCompletion completion:(void (^)(BOOL finished))completionBlock
{
    
    [self connPower];
    
    
    CAMediaTimingFunction *linearTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
    CAMediaTimingFunction *easeInTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn];
    CAMediaTimingFunction *instantTiming = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionDefault];
    
    if (completionBlock)
    {
        CABasicAnimation *representativeAnimation = [CABasicAnimation animationWithKeyPath:@"not.a.real.key"];
        representativeAnimation.duration = 10.250;
        representativeAnimation.delegate = self;
        [self.layer addAnimation:representativeAnimation forKey:@"Onpudding"];
        [self.completionBlocksByAnimation setObject:completionBlock forKey:[self.layer animationForKey:@"Onpudding"]];
    }
    
    CAKeyframeAnimation *powerSGestureOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    powerSGestureOpacityAnimation.duration = 10.250;
    powerSGestureOpacityAnimation.values = @[@(0.000), @(0.000), @(0.830), @(1.000), @(1.000), @(0.849), @(0.000), @(0.000)];
    powerSGestureOpacityAnimation.keyTimes = @[@(0.000), @(0.195), @(0.247), @(0.293), @(0.390), @(0.429), @(0.449), @(1.000)];
    powerSGestureOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
    powerSGestureOpacityAnimation.beginTime = beginTime;
    powerSGestureOpacityAnimation.fillMode = fillMode;
    powerSGestureOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"power's_gesture"] layer] addAnimation:powerSGestureOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *powerSGestureTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
    powerSGestureTranslationXAnimation.duration = 10.250;
    powerSGestureTranslationXAnimation.values = @[@(0.000), @(0.000), @(SX(-126.367)), @(SX(-126.367))];
    powerSGestureTranslationXAnimation.keyTimes = @[@(0.000), @(0.195), @(0.293), @(1.000)];
    powerSGestureTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
    powerSGestureTranslationXAnimation.beginTime = beginTime;
    powerSGestureTranslationXAnimation.fillMode = fillMode;
    powerSGestureTranslationXAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"power's_gesture"] layer] addAnimation:powerSGestureTranslationXAnimation forKey:@"onpudding_TranslationX"];
    
    CAKeyframeAnimation *powerSGestureTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
    powerSGestureTranslationYAnimation.duration = 10.250;
    powerSGestureTranslationYAnimation.values = @[@(0.000), @(0.000), @(SX(-3.954)), @(SX(-12.543)), @(SX(-12.543))];
    powerSGestureTranslationYAnimation.keyTimes = @[@(0.000), @(0.195), @(0.247), @(0.293), @(1.000)];
    powerSGestureTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, easeInTiming, linearTiming];
    powerSGestureTranslationYAnimation.beginTime = beginTime;
    powerSGestureTranslationYAnimation.fillMode = fillMode;
    powerSGestureTranslationYAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"power's_gesture"] layer] addAnimation:powerSGestureTranslationYAnimation forKey:@"onpudding_TranslationY"];
    
    CAKeyframeAnimation *magnifierOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    magnifierOpacityAnimation.duration = 10.250;
    magnifierOpacityAnimation.values = @[@(0.000), @(0.000), @(0.837), @(1.000), @(1.000), @(0.874), @(0.000), @(0.000)];
    magnifierOpacityAnimation.keyTimes = @[@(0.000), @(0.293), @(0.312), @(0.332), @(0.390), @(0.420), @(0.449), @(1.000)];
    magnifierOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
    magnifierOpacityAnimation.beginTime = beginTime;
    magnifierOpacityAnimation.fillMode = fillMode;
    magnifierOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"magnifier"] layer] addAnimation:magnifierOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *puddingSbackRotationAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.rotation.z"];
    puddingSbackRotationAnimation.duration = 10.250;
    puddingSbackRotationAnimation.values = @[@(0.000), @(0.000), @(0.000), @(0.000), @(0.000), @(0.000)];
    puddingSbackRotationAnimation.keyTimes = @[@(0.000), @(0.034), @(0.390), @(0.488), @(0.566), @(1.000)];
    puddingSbackRotationAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
    puddingSbackRotationAnimation.beginTime = beginTime;
    puddingSbackRotationAnimation.fillMode = fillMode;
    puddingSbackRotationAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"pudding'sback"] layer] addAnimation:puddingSbackRotationAnimation forKey:@"onpudding_Rotation"];
    
    CAKeyframeAnimation *puddingSbackOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    puddingSbackOpacityAnimation.duration = 10.250;
    puddingSbackOpacityAnimation.values = @[@(1.000), @(1.000), @(1.000), @(0.000), @(0.000)];
    puddingSbackOpacityAnimation.keyTimes = @[@(0.000), @(0.488), @(0.566), @(0.566), @(1.000)];
    puddingSbackOpacityAnimation.timingFunctions = @[linearTiming, instantTiming, instantTiming, linearTiming];
    puddingSbackOpacityAnimation.beginTime = beginTime;
    puddingSbackOpacityAnimation.fillMode = fillMode;
    puddingSbackOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"pudding'sback"] layer] addAnimation:puddingSbackOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *sleepPasteOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    sleepPasteOpacityAnimation.duration = 10.250;
    sleepPasteOpacityAnimation.values = @[@(0.000), @(0.000), @(1.000), @(1.000)];
    sleepPasteOpacityAnimation.keyTimes = @[@(0.000), @(0.890), @(0.902), @(1.000)];
    sleepPasteOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
    sleepPasteOpacityAnimation.beginTime = beginTime;
    sleepPasteOpacityAnimation.fillMode = fillMode;
    sleepPasteOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"sleep paste"] layer] addAnimation:sleepPasteOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *puddingEmptyOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    puddingEmptyOpacityAnimation.duration = 10.250;
    puddingEmptyOpacityAnimation.values = @[@(0.000), @(0.000), @(1.000), @(1.000)];
    puddingEmptyOpacityAnimation.keyTimes = @[@(0.000), @(0.768), @(0.771), @(1.000)];
    puddingEmptyOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
    puddingEmptyOpacityAnimation.beginTime = beginTime;
    puddingEmptyOpacityAnimation.fillMode = fillMode;
    puddingEmptyOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"pudding_empty"] layer] addAnimation:puddingEmptyOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *puddingSSleepPasteOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    puddingSSleepPasteOpacityAnimation.duration = 10.250;
    puddingSSleepPasteOpacityAnimation.values = @[@(0.000), @(0.000), @(1.000), @(1.000), @(0.000), @(0.000)];
    puddingSSleepPasteOpacityAnimation.keyTimes = @[@(0.000), @(0.488), @(0.566), @(0.768), @(0.771), @(1.000)];
    puddingSSleepPasteOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
    puddingSSleepPasteOpacityAnimation.beginTime = beginTime;
    puddingSSleepPasteOpacityAnimation.fillMode = fillMode;
    puddingSSleepPasteOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"pudding‘s_sleep paste"] layer] addAnimation:puddingSSleepPasteOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *takeAwayGestureOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    takeAwayGestureOpacityAnimation.duration = 10.250;
    takeAwayGestureOpacityAnimation.values = @[@(0.000), @(0.000), @(1.000), @(0.000), @(0.000)];
    takeAwayGestureOpacityAnimation.keyTimes = @[@(0.000), @(0.671), @(0.768), @(0.771), @(1.000)];
    takeAwayGestureOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming];
    takeAwayGestureOpacityAnimation.beginTime = beginTime;
    takeAwayGestureOpacityAnimation.fillMode = fillMode;
    takeAwayGestureOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"take_away_gesture"] layer] addAnimation:takeAwayGestureOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *takeAwayGestureTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
    takeAwayGestureTranslationXAnimation.duration = 10.250;
    takeAwayGestureTranslationXAnimation.values = @[@(0.000), @(0.000), @(SX(-65.848)), @(SX(-65.848))];
    takeAwayGestureTranslationXAnimation.keyTimes = @[@(0.000), @(0.671), @(0.768), @(1.000)];
    takeAwayGestureTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
    takeAwayGestureTranslationXAnimation.beginTime = beginTime;
    takeAwayGestureTranslationXAnimation.fillMode = fillMode;
    takeAwayGestureTranslationXAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"take_away_gesture"] layer] addAnimation:takeAwayGestureTranslationXAnimation forKey:@"onpudding_TranslationX"];
    
    CAKeyframeAnimation *takeAwayGestureTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
    takeAwayGestureTranslationYAnimation.duration = 10.250;
    takeAwayGestureTranslationYAnimation.values = @[@(0.000), @(0.000), @(SX(-9.986)), @(SX(-87.021)), @(SX(-87.021))];
    takeAwayGestureTranslationYAnimation.keyTimes = @[@(0.000), @(0.671), @(0.702), @(0.768), @(1.000)];
    takeAwayGestureTranslationYAnimation.timingFunctions = @[linearTiming, easeInTiming, easeInTiming, linearTiming];
    takeAwayGestureTranslationYAnimation.beginTime = beginTime;
    takeAwayGestureTranslationYAnimation.fillMode = fillMode;
    takeAwayGestureTranslationYAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"take_away_gesture"] layer] addAnimation:takeAwayGestureTranslationYAnimation forKey:@"onpudding_TranslationY"];
    
    CAKeyframeAnimation *phoneSgestureOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    phoneSgestureOpacityAnimation.duration = 10.250;
    phoneSgestureOpacityAnimation.values = @[@(0.000), @(0.000)];
    phoneSgestureOpacityAnimation.keyTimes = @[@(0.000), @(1.000)];
    phoneSgestureOpacityAnimation.timingFunctions = @[linearTiming];
    phoneSgestureOpacityAnimation.beginTime = beginTime;
    phoneSgestureOpacityAnimation.fillMode = fillMode;
    phoneSgestureOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"phone'sgesture"] layer] addAnimation:phoneSgestureOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *removalOfStickersSleepOpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    removalOfStickersSleepOpacityAnimation.duration = 10.250;
    removalOfStickersSleepOpacityAnimation.values = @[@(0.000), @(0.000), @(0.000), @(0.000), @(0.000), @(1.000), @(0.520), @(0.000), @(0.000)];
    removalOfStickersSleepOpacityAnimation.keyTimes = @[@(0.000), @(0.127), @(0.195), @(0.293), @(0.768), @(0.771), @(0.878), @(0.890), @(1.000)];
    removalOfStickersSleepOpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
    removalOfStickersSleepOpacityAnimation.beginTime = beginTime;
    removalOfStickersSleepOpacityAnimation.fillMode = fillMode;
    removalOfStickersSleepOpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"removal of stickers Sleep"] layer] addAnimation:removalOfStickersSleepOpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *removalOfStickersSleepTranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
    removalOfStickersSleepTranslationXAnimation.duration = 10.250;
    removalOfStickersSleepTranslationXAnimation.values = @[@(0.000), @(0.000), @(SX(112.564)), @(SX(116.564)), @(SX(116.564))];
    removalOfStickersSleepTranslationXAnimation.keyTimes = @[@(0.000), @(0.771), @(0.878), @(0.890), @(1.000)];
    removalOfStickersSleepTranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming];
    removalOfStickersSleepTranslationXAnimation.beginTime = beginTime;
    removalOfStickersSleepTranslationXAnimation.fillMode = fillMode;
    removalOfStickersSleepTranslationXAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"removal of stickers Sleep"] layer] addAnimation:removalOfStickersSleepTranslationXAnimation forKey:@"onpudding_TranslationX"];
    
    CAKeyframeAnimation *removalOfStickersSleepTranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
    removalOfStickersSleepTranslationYAnimation.duration = 10.250;
    removalOfStickersSleepTranslationYAnimation.values = @[@(0.000), @(0.000), @(SX(67.959)), @(SX(67.959))];
    removalOfStickersSleepTranslationYAnimation.keyTimes = @[@(0.000), @(0.771), @(0.878), @(1.000)];
    removalOfStickersSleepTranslationYAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming];
    removalOfStickersSleepTranslationYAnimation.beginTime = beginTime;
    removalOfStickersSleepTranslationYAnimation.fillMode = fillMode;
    removalOfStickersSleepTranslationYAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"removal of stickers Sleep"] layer] addAnimation:removalOfStickersSleepTranslationYAnimation forKey:@"onpudding_TranslationY"];
    
    CAKeyframeAnimation *chargingPlug2OpacityAnimation = [CAKeyframeAnimation animationWithKeyPath:@"opacity"];
    chargingPlug2OpacityAnimation.duration = 10.250;
    chargingPlug2OpacityAnimation.values = @[@(0.000), @(1.000), @(1.000), @(0.502), @(0.000), @(0.000), @(0.000), @(0.000)];
    chargingPlug2OpacityAnimation.keyTimes = @[@(0.000), @(0.034), @(0.390), @(0.420), @(0.449), @(0.488), @(0.566), @(1.000)];
    chargingPlug2OpacityAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
    chargingPlug2OpacityAnimation.beginTime = beginTime;
    chargingPlug2OpacityAnimation.fillMode = fillMode;
    chargingPlug2OpacityAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"charging plug 2"] layer] addAnimation:chargingPlug2OpacityAnimation forKey:@"onpudding_Opacity"];
    
    CAKeyframeAnimation *chargingPlug2TranslationXAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.x"];
    chargingPlug2TranslationXAnimation.duration = 10.250;
    chargingPlug2TranslationXAnimation.values = @[@(0.000), @(0.000), @(SX(44.979)), @(SX(44.979)), @(SX(45.479)), @(SX(45.479))];
    chargingPlug2TranslationXAnimation.keyTimes = @[@(0.000), @(0.034), @(0.127), @(0.390), @(0.488), @(1.000)];
    chargingPlug2TranslationXAnimation.timingFunctions = @[linearTiming, linearTiming, linearTiming, linearTiming, linearTiming];
    chargingPlug2TranslationXAnimation.beginTime = beginTime;
    chargingPlug2TranslationXAnimation.fillMode = fillMode;
    chargingPlug2TranslationXAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"charging plug 2"] layer] addAnimation:chargingPlug2TranslationXAnimation forKey:@"onpudding_TranslationX"];
    
    CAKeyframeAnimation *chargingPlug2TranslationYAnimation = [CAKeyframeAnimation animationWithKeyPath:@"transform.translation.y"];
    chargingPlug2TranslationYAnimation.duration = 10.250;
    chargingPlug2TranslationYAnimation.values = @[@(0.000), @(0.000), @(SX(-7.457)), @(SX(-48.346)), @(SX(-48.346))];
    chargingPlug2TranslationYAnimation.keyTimes = @[@(0.000), @(0.034), @(0.068), @(0.127), @(1.000)];
    chargingPlug2TranslationYAnimation.timingFunctions = @[linearTiming, easeInTiming, easeInTiming, linearTiming];
    chargingPlug2TranslationYAnimation.beginTime = beginTime;
    chargingPlug2TranslationYAnimation.fillMode = fillMode;
    chargingPlug2TranslationYAnimation.removedOnCompletion = removedOnCompletion;
    [[self.viewsByName[@"charging plug 2"] layer] addAnimation:chargingPlug2TranslationYAnimation forKey:@"onpudding_TranslationY"];
    
    
}

- (void)removeOnpuddingAnimation
{
    [self.layer removeAnimationForKey:@"Onpudding"];
    [[self.viewsByName[@"power's_gesture"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"power's_gesture"] layer] removeAnimationForKey:@"onpudding_TranslationX"];
    [[self.viewsByName[@"power's_gesture"] layer] removeAnimationForKey:@"onpudding_TranslationY"];
    [[self.viewsByName[@"magnifier"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"pudding'sback"] layer] removeAnimationForKey:@"onpudding_Rotation"];
    [[self.viewsByName[@"pudding'sback"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"sleep paste"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"pudding_empty"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"pudding‘s_sleep paste"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"take_away_gesture"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"take_away_gesture"] layer] removeAnimationForKey:@"onpudding_TranslationX"];
    [[self.viewsByName[@"take_away_gesture"] layer] removeAnimationForKey:@"onpudding_TranslationY"];
    [[self.viewsByName[@"phone'sgesture"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"removal of stickers Sleep"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"removal of stickers Sleep"] layer] removeAnimationForKey:@"onpudding_TranslationX"];
    [[self.viewsByName[@"removal of stickers Sleep"] layer] removeAnimationForKey:@"onpudding_TranslationY"];
    [[self.viewsByName[@"charging plug 2"] layer] removeAnimationForKey:@"onpudding_Opacity"];
    [[self.viewsByName[@"charging plug 2"] layer] removeAnimationForKey:@"onpudding_TranslationX"];
    [[self.viewsByName[@"charging plug 2"] layer] removeAnimationForKey:@"onpudding_TranslationY"];
}



- (void)animationDidStop:(CAAnimation *)anim finished:(BOOL)flag
{
	void (^completion)(BOOL) = [self.completionBlocksByAnimation objectForKey:anim];
	[self.completionBlocksByAnimation removeObjectForKey:anim];
	if (completion)
    {
		completion(flag);
	}
}

- (void)removeAllAnimations
{
	for (UIView *view in self.viewsByName.allValues)
	{
		[view.layer removeAllAnimations];
	}
	[self.layer removeAnimationForKey:@"Onpudding"];
}

#pragma mark ------------------- 通知 ------------------------
#pragma mark - 添加通知
/**
 *  添加播放结束的通知
 */
- (void)addNotification{
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(applicationDidEnterBackground:) name:UIApplicationDidEnterBackgroundNotification object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(applicationWillEnterForeground:) name:UIApplicationWillEnterForegroundNotification object:nil];
    
}
#pragma mark - 移除通知
/**
 *  移除通知
 */
- (void)removeNotification{
    [[NSNotificationCenter defaultCenter]removeObserver:self];
}

- (void)applicationDidEnterBackground:(UIApplication *)application {
    NSLog(@"%@",self.layer.animationKeys);
    NSArray * animationKeys = self.layer.animationKeys;
    if([animationKeys containsObject:@"Onpudding"]){
        [self removeAllAnimations];

        [self addStartWifiAnimail];
    }else if([animationKeys containsObject:@"Movegrsture"]){
        [self removeAllAnimations];
        [self addSettingAnimail];
        [self changeHandleLocation];
    }
    NSLog(@"%s",__func__);
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    NSLog(@"%s",__func__);
    
    [self removeAllAnimations];
    UIImageView * imageView = self.viewsByName[@"wifi_lamparray"];
    [imageView startAnimating];

}


#pragma mark - times

- (void)onHandleDone{
//    UIView *viewToAnimate = self.viewsByName[@"phone'sgesture"];
//    viewToAnimate.alpha = 1;
//    viewToAnimate.layer.position = CGPointMake(SX(384.132-99), SX(85.031 + 31));

}

- (void)openPudding{
    NSLog(@"去掉休mingtie");
    if(_puddingOpenAnimail){
        _puddingOpenAnimail();
    }
}

- (void)onPudding{
    NSLog(@"启动布丁");

    timer = [NSTimer timerWithTimeInterval:2.4 target:self selector:@selector(openPudding) userInfo:nil repeats:NO];
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];
}

- (void)connPower{
    NSLog(@"连接电源");
    timer = [NSTimer timerWithTimeInterval:2.0 target:self selector:@selector(onPudding) userInfo:nil repeats:NO];
    [[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];
}

- (void)dealloc{
    [self removeNotification];
    
}
@end
